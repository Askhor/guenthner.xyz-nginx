server {
	listen 80;
	listen [::]:80;
	listen 443 ssl;
	listen [::]:443 ssl;
	listen 443 quic reuseport;
	listen [::]:443 quic reuseport;

	server_name guenthner.xyz;

	ssl_certificate /etc/letsencrypt/live/guenthner.xyz/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/guenthner.xyz/privkey.pem;

	root /var/www/guenthner.xyz;

	location / {
		try_files "/text$uri" @proxy_to_django;
	}

	location /images {
		autoindex on;
		root /var/www/guenthner.xyz;
	}

	location /documents {
		autoindex on;
		root /var/www/guenthner.xyz;
	}

	location /django {
		root /var/www/guenthner.xyz;
	}

	location @proxy_to_django {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Host $http_host;
		# we don't want nginx trying to do something clever with
		# redirects, we set the Host: header above already.
		proxy_redirect off;
		proxy_buffering off;
        proxy_cache_path /var/cache/nginx/ keys_zone=mycache:10m max_size=10g inactive=60m use_temp_path=off levels=1:2;
        proxy_cache mycache;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        # proxy_cache_lock on;
        add_header X-Cache-Status $upstream_cache_status;
        proxy_cache_bypass $http_pragma;
		proxy_pass http://127.0.0.1:8000;
	}

	# location = /500.html {
	# 	root /path/to/app/current/public;
	#}

	# upstream app_server {
		# fail_timeout=0 means we always retry an upstream even if it failed
	 	# to return a good HTTP response

	 	# for UNIX domain socket setups
		#server unix:/tmp/gunicorn.sock fail_timeout=0;

	 	# for a TCP configuration
	#	server localhost:8000 fail_timeout=0;
	#}
}

